import AxiosInstance from "./AxiosConfig.api";
// H√†m ti·ªán √≠ch ƒë·ªÉ l·∫•y headers k√®m token
const authHeaders = () => {
  const token = localStorage.getItem("accessToken");
  console.log("üîë Token frontend l·∫•y ra:", token);

  return {
    Authorization: token ? `Bearer ${token}` : "",
    "Content-Type": "application/json",
  };
};

export const createQuestions = (exam_id, data) => {
    try {
        console.log("ID cu·∫£ b√†i thi: ", exam_id)
        const response = AxiosInstance.post(
          `/api/exams/create-question/${exam_id}}`,
          data,
          { headers: authHeaders() }
        );
        console.log("C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c t·∫°o:", response.data);
        return response.data;
    } 
    catch (error) {
        console.error("L·ªói khi t·∫°o c√¢u h·ªèi -> ki·ªÉm tra ƒë∆∞·ªùng d·∫´n API:", error);
    }
} ;

export const getAllQuestionsByExam = async (exam_id) => {
    try{
        console.log("Id c·ªßa b√†i thi ƒë√£ l·∫•y t·ª´ URL:", exam_id)
        const response = await AxiosInstance.get(
          `/api/exams/question/${exam_id}`,
          { headers: authHeaders() }
        );
        if(response) {
            console.log("T·∫•t c·∫£ c√¢u h·ªèi theo ƒë·ªÅ thi:", response.data);
            return response.data;
        }
        else {
            console.log("Ch∆∞a c√≥ c√¢u h·ªèi n√†o trong ƒë·ªÅ thi n√†y.");
        }
    }
    catch(error) {
        console.error("L·ªói khi l·∫•y t·∫•t c·∫£ c√¢u h·ªèi theo ƒë·ªÅ thi:", error);
    }
};

// export const getAllOptionByQuestion = async (question_id) => {
//     try {
//         console.log("Id c·ªßa c√¢u h·ªèi ƒë√£ l·∫•y t·ª´ URL:", question_id);
//         const response = await AxiosInstance.get('/api/exmas/')
//     }
//     catch(error) {
//         console.error("L·ªói khi l·∫•y t·∫•t c·∫£ option theo c√¢u h·ªèi:", error);
//     }
// }


export const createOptionByQuestion = async (question_id, optionData) => {
    try {
        console.log("ID c·ªßa c√¢u h·ªèi: ", question_id);
        console.log("D·ªØ li·ªáu option: ", optionData);
        const response = await AxiosInstance.post(
          `/api/exams/create-option/${question_id}`,
          { headers: authHeaders() },
            optionData
        );
        if(response) {
            console.log("Option ƒë√£ ƒë∆∞·ª£c t·∫°o:", response.data);
            return response.data;
        }
        else {
            console.log("Ch∆∞a c√≥ option n√†o ƒë∆∞·ª£c t·∫°o cho c√¢u h·ªèi n√†y.");
        }
    } 
    catch(error) {
        console.error("L·ªói khi t·∫°o option cho c√¢u h·ªèi:", error);
    }
}